# Upgrades/installs all components for ratify containerd plugin
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nsenter-actions
  labels:
    app: nsenter
data:
  setup-credential-provider: |
    #!/usr/bin/env bash
    set -xe

    echo "=========================================="
    echo "Credential Provider Setup Script"
    echo "=========================================="
    echo ""

    # Check if already configured
    if [[ -f /opt/credential-provider-configured ]]; then
      echo "Credential provider already configured, exiting"
      exit 0
    fi

    # Detect architecture
    ARCH=$(uname -m)
    echo "Detected architecture: ${ARCH}"
    
    if [[ "${ARCH}" == "x86_64" ]]; then
      BINARY_ARCH="amd64"
    elif [[ "${ARCH}" == "aarch64" ]]; then
      BINARY_ARCH="arm64"
    else
      echo "ERROR: Unsupported architecture: ${ARCH}"
      exit 1
    fi
    echo ""

    # Create directories
    echo "Creating directories..."
    mkdir -p /etc/kubernetes/credential-provider
    mkdir -p /opt
    echo "✓ Created directory: /etc/kubernetes/credential-provider"
    echo "✓ Created directory: /opt"
    echo ""

    # Download the Azure ACR credential provider binary
    echo "Downloading Azure ACR credential provider for ${BINARY_ARCH}..."
    curl -L "https://raw.githubusercontent.com/billy-playground/aks-mirror/refs/heads/master/bin/${BINARY_ARCH}/azure-acr-credential-provider" \
      -o /opt/azure-acr-credential-provider
    chmod +x /opt/azure-acr-credential-provider
    echo "✓ Downloaded and installed to: /opt/azure-acr-credential-provider"
    echo ""

    # Generate credential provider configuration
    echo "Generating credential provider configuration..."
    CRED_CONFIG_FILE="/etc/kubernetes/credential-provider/credential-provider-config.yaml"
    
    # Create the credential provider config directly with printf
    printf '%s\n' \
      'apiVersion: kubelet.config.k8s.io/v1' \
      'kind: CredentialProviderConfig' \
      'providers:' \
      '  - name: azure-acr-credential-provider' \
      '    matchImages:' \
      '      - "*.azurecr.io"' \
      '      - "*.azurecr.cn"' \
      '      - "*.azurecr.de"' \
      '      - "*.azurecr.us"' \
      '    defaultCacheDuration: "10m"' \
      '    apiVersion: credentialprovider.kubelet.k8s.io/v1' \
      '    tokenAttributes:' \
      '      serviceAccountTokenAudience: api://AzureADTokenExchange' \
      '      requireServiceAccount: true' \
      '      requiredServiceAccountAnnotationKeys:' \
      '      - kubernetes.azure.com/acr-client-id' \
      '      - kubernetes.azure.com/acr-tenant-id' \
      '    args:' \
      '      - /etc/kubernetes/azure.json' \
      > "${CRED_CONFIG_FILE}"
    
    echo "Generated credential provider config:"
    cat "${CRED_CONFIG_FILE}"
    echo ""

    # Update kubelet configuration in /etc/default/kubelet
    KUBELET_CONFIG_FILE="/etc/default/kubelet"
    
    echo "=========================================="
    echo "KUBELET CONFIGURATION ANALYSIS"
    echo "=========================================="
    echo ""
    
    # Show original kubelet configuration
    echo "=== ORIGINAL KUBELET CONFIGURATION ==="
    if [[ -f "${KUBELET_CONFIG_FILE}" ]]; then
      cat "${KUBELET_CONFIG_FILE}"
    else
      echo "ERROR: ${KUBELET_CONFIG_FILE} not found!"
      exit 1
    fi
    echo ""
    echo "=========================================="
    echo ""
    
    # Backup original kubelet config
    if [[ ! -f "${KUBELET_CONFIG_FILE}.bak" ]]; then
      cp "${KUBELET_CONFIG_FILE}" "${KUBELET_CONFIG_FILE}.bak"
      echo "Created backup at ${KUBELET_CONFIG_FILE}.bak"
    else
      echo "Backup already exists at ${KUBELET_CONFIG_FILE}.bak"
    fi
    echo ""

    # Check if already configured with our custom paths
    if ! grep -q "image-credential-provider-config=/etc/kubernetes/credential-provider/credential-provider-config.yaml" "${KUBELET_CONFIG_FILE}"; then
      echo "Updating credential provider configuration in KUBELET_FLAGS..."
      echo ""
      
      # Create a temporary file for modifications
      TEMP_FILE=$(mktemp)
      cp "${KUBELET_CONFIG_FILE}" "${TEMP_FILE}"
      
      # Replace the default AKS credential provider paths with our custom ones
      sed -i 's|--image-credential-provider-bin-dir=/var/lib/kubelet/credential-provider|--image-credential-provider-bin-dir=/opt|g' "${TEMP_FILE}"
      sed -i 's|--image-credential-provider-config=/var/lib/kubelet/credential-provider-config.yaml|--image-credential-provider-config=/etc/kubernetes/credential-provider/credential-provider-config.yaml|g' "${TEMP_FILE}"
      
      # Add feature gate if not present
      if ! grep -q "KubeletServiceAccountTokenForCredentialProviders=true" "${TEMP_FILE}"; then
        echo "Adding KubeletServiceAccountTokenForCredentialProviders feature gate..."
        # Check for feature-gates flag and prepend to it
        if grep -q -- "--feature-gates=" "${TEMP_FILE}"; then
          # Prepend our feature gate to existing ones (works for all cases)
          sed -i 's|--feature-gates=|--feature-gates=KubeletServiceAccountTokenForCredentialProviders=true,|g' "${TEMP_FILE}"
        else
          # No feature-gates flag exists, add it to KUBELET_FLAGS
          echo "No existing --feature-gates flag found, adding new one..."
          # Add at the end of KUBELET_FLAGS line
          sed -i 's|\(KUBELET_FLAGS=.*\)|\1 --feature-gates=KubeletServiceAccountTokenForCredentialProviders=true|' "${TEMP_FILE}"
        fi
      fi
      echo ""
      
      echo "=== UPDATED KUBELET CONFIGURATION ==="
      cat "${TEMP_FILE}"
      echo ""
      echo "=========================================="
      echo ""
      
      # Show diff between original and updated
      echo "=== CONFIGURATION DIFF ==="
      diff -u "${KUBELET_CONFIG_FILE}" "${TEMP_FILE}" || true
      echo ""
      echo "=========================================="
      echo ""
      
      # Validate the modified file has required content
      echo "=== VALIDATION CHECKS ==="
      
      # Check 1: Credential provider config path
      if grep -q "image-credential-provider-config=/etc/kubernetes/credential-provider/credential-provider-config.yaml" "${TEMP_FILE}"; then
        echo "✓ Credential provider config path: FOUND"
      else
        echo "✗ Credential provider config path: MISSING"
        echo "ERROR: Validation failed! Configuration not applied."
        cat "${TEMP_FILE}"
        rm "${TEMP_FILE}"
        exit 1
      fi
      
      # Check 2: Credential provider bin dir
      if grep -q "image-credential-provider-bin-dir=/opt" "${TEMP_FILE}"; then
        echo "✓ Credential provider bin dir: FOUND"
      else
        echo "✗ Credential provider bin dir: MISSING"
        echo "ERROR: Validation failed! Configuration not applied."
        cat "${TEMP_FILE}"
        rm "${TEMP_FILE}"
        exit 1
      fi
      
      # Check 3: Feature gate
      if grep -q "KubeletServiceAccountTokenForCredentialProviders=true" "${TEMP_FILE}"; then
        echo "✓ Feature gate KubeletServiceAccountTokenForCredentialProviders: FOUND"
      else
        echo "✗ Feature gate KubeletServiceAccountTokenForCredentialProviders: MISSING"
        echo "ERROR: Validation failed! Configuration not applied."
        cat "${TEMP_FILE}"
        rm "${TEMP_FILE}"
        exit 1
      fi
      
      # Check 4: Ensure KUBELET_FLAGS line exists and is valid
      if grep -q "^KUBELET_FLAGS=" "${TEMP_FILE}"; then
        echo "✓ KUBELET_FLAGS line: VALID"
      else
        echo "✗ KUBELET_FLAGS line: INVALID OR MISSING"
        echo "ERROR: Validation failed! Configuration not applied."
        cat "${TEMP_FILE}"
        rm "${TEMP_FILE}"
        exit 1
      fi
      
      # Check 5: No old paths remaining
      if grep -q "image-credential-provider-config=/var/lib/kubelet/credential-provider-config.yaml" "${TEMP_FILE}"; then
        echo "✗ Old credential provider config path still present!"
        echo "ERROR: Validation failed! Configuration not applied."
        cat "${TEMP_FILE}"
        rm "${TEMP_FILE}"
        exit 1
      else
        echo "✓ Old credential provider config path: REMOVED"
      fi
      
      if grep -q "image-credential-provider-bin-dir=/var/lib/kubelet/credential-provider[^-]" "${TEMP_FILE}"; then
        echo "✗ Old credential provider bin dir still present!"
        echo "ERROR: Validation failed! Configuration not applied."
        cat "${TEMP_FILE}"
        rm "${TEMP_FILE}"
        exit 1
      else
        echo "✓ Old credential provider bin dir: REMOVED"
      fi
      
      echo ""
      echo "=== ALL VALIDATION CHECKS PASSED ==="
      echo ""
      
      # Apply configuration
      echo "Applying configuration..."
      cp "${TEMP_FILE}" "${KUBELET_CONFIG_FILE}"
      rm "${TEMP_FILE}"
      echo "Configuration applied successfully"
    else
      echo "=========================================="
      echo "CONFIGURATION STATUS: ALREADY CONFIGURED"
      echo "=========================================="
      echo ""
      echo "✓ Credential provider is already configured with custom paths"
      echo "✓ No changes needed"
      echo ""
      echo "Current configuration detected:"
      echo "  • Config path: /etc/kubernetes/credential-provider/credential-provider-config.yaml"
      echo "  • Binary dir: /opt"
      echo ""
      echo "=========================================="
      exit 0
    fi
    echo ""

    # Mark as configured
    touch /opt/credential-provider-configured
    echo "Created sentinel file: /opt/credential-provider-configured"
    echo ""

    # Restart kubelet to apply changes
    echo "Restarting kubelet..."
    systemctl restart kubelet
    
    # Wait a bit and check if kubelet is running
    echo "Waiting 5 seconds for kubelet to start..."
    sleep 5
    
    if systemctl is-active --quiet kubelet; then
      echo "✓ Kubelet restarted successfully"
      echo ""
      echo "=== KUBELET STATUS ==="
      systemctl status kubelet --no-pager -l || true
    else
      echo "✗ ERROR: Kubelet failed to restart!"
      echo ""
      echo "=== KUBELET SERVICE STATUS ==="
      systemctl status kubelet --no-pager -l || true
      echo ""
      echo "=== KUBELET SERVICE LOGS ==="
      journalctl -u kubelet --no-pager -l --since="1 minute ago" || true
      echo ""
      echo "=== FAILED CONFIGURATION ==="
      cat "${KUBELET_CONFIG_FILE}"
      echo ""
      echo "This is a critical failure. The kubelet configuration is invalid."
      echo "Manual intervention may be required."
    fi
    echo ""

    # Mark as configured
    touch /opt/credential-provider-configured
    echo "Created sentinel file: /opt/credential-provider-configured"
    echo ""

    echo "=========================================="
    echo "✓ Credential provider setup completed successfully"
    echo "=========================================="
    echo ""
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: &name setup-credential-provider
  labels:
    app: *name
spec:
  selector:
    matchLabels:
      app: *name
  template:
    metadata:
      labels:
        app: *name
    spec:
      hostNetwork: true
      hostPID: true
      containers:
      - image: docker.io/alexeldeib/nsenter:latest
        imagePullPolicy: Always
        name: *name
        command: ["/bin/bash", "-c"]
        args:
          - |
            # Copy action to mnt/actions which is mounted to host
            cp -R /opt/actions/. /mnt/actions/
            # Execute via nsenter using the host path
            nsenter -t 1 -m -u -i -n -p bash /tmp/nsenter-actions/setup-credential-provider
        resources:
          requests:
            cpu: 0.5
            memory: 2000Mi
          limits:
            cpu: 0.5
            memory: 2000Mi
        securityContext:
          privileged: true
        volumeMounts:
        - name: actions
          mountPath: "/opt/actions"
        - name: mnt-actions
          mountPath: "/mnt/actions"
      volumes:
      - name: actions
        configMap:
          name: nsenter-actions
          defaultMode: 0755
      - name: mnt-actions
        hostPath:
          path: /tmp/nsenter-actions
          type: DirectoryOrCreate
